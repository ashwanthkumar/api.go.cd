## Create a backup

```shell
$ curl 'https://ci.example.com/go/api/backups' \
      -u 'username:password' \
      -H 'Confirm: true' \
      -H 'Accept: <%= data.apis.versions.backup %>' \
      -X POST
```

> The above command returns JSON structured like this:

```http
HTTP/1.1 200 OK
Content-Type: <%= data.apis.versions.backup %>; charset=utf-8
```

```json
{
  "_links": {
    "doc": {
      "href": "https://api.gocd.io/#backups"
    }
  },
  "time": "2015-08-07T10:07:19.868Z",
  "path": "/var/lib/go-server/serverBackups/backup_20150807-153719",
  "user": {
    "_links": {
      "doc": {
        "href": "https://api.gocd.io/#users"
      },
      "self": {
        "href": "https://ci.example.com/go/api/users/username"
      },
      "find": {
        "href": "https://ci.example.com/go/api/users/:login_name"
      }
    },
    "login_name": "username"
  }
}
```

Create a server backup.

<aside class="warning">
  The server may be unavailable during the time that the backup is being taken.
</aside>

<aside class="notice">
  The response from the call will not be received till the backup is complete
  (synchronous). If the data to be backed up is a lot, this can take minutes
  to complete.
</aside>


<%=
available_since('15.2.0') do
  in_version '15.1.0', url: 'http://www.gocd.io/documentation/user/15.1.0/api/backup_api.html'
  in_version '14.4.0', url: 'http://www.gocd.io/documentation/user/14.4.0/api/backup_api.html'
  in_version '14.3.0', url: 'http://www.gocd.io/documentation/user/14.3.0/api/backup_api.html'
end
%>


<p class='http-request-heading'>HTTP Request</p>

`POST /go/api/backups`

<p class='http-request-return-description'>Returns</p>

A new [backup object](#the-backup-object).
